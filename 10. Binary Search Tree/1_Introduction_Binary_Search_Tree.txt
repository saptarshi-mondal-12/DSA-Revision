Introduction to Binary Search Tree

        8
       / \
      3   10
     / \    \
    1   6    14
       / \   /
      4   7 13

Q. What is a Binary Search Tree?
A binary search tree (BST) is a binary tree where every node in the left subtree is less than the root, and every node in the right subtree is of a value greater than the root. The properties of a binary search tree are recursive: if we consider any node as a “root,” these properties will remain true.

As we can visualize from the above Tree, the right subtree has all the elements greater than the root element and the left subtree has all the elements lesser than the root element. A point to note here is that every subtree is itself a Binary Search Tree as it contains a subtree whose root node is lesser than the value of the current node and another subtree whose root node is greater than the value of the current node.

Properties of Binary Search Tree:

1. The left subtree of a node contains only nodes with keys less than the node’s key.

2. The right subtree of a node contains only nodes with keys greater than the node’s key.

3. The left and right subtree each must also be a binary search tree.  

4. There must be no duplicate nodes(BST may have duplicate values with different handling approaches).


For every given node in a Binary Search Tree if a left or a right child exists then:
 
    [ Left Child < Node < Right Child ]

Now, for the general implementation of Binary Search Trees, duplicate node values are not allowed. However, in some exceptional cases of Binary Search Tree implementation, we can represent a Binary Search Tree with duplicate node values 

So, generally in a BST, the maximum height in almost all cases is kept in order of log(N)2 where N = No. of nodes which is in contrast to the plain Binary Tree whose maximum height can reach the order of N when the tree is skewed.

For example, if we have to search for an element, we can directly compare it to the root node value of the BST, if the value matches then we have found the element, if say the value is greater than the root node, we say that we now move on to searching that element in the right subtree because the right subtree has all the node values greater than the root value. The search process is terminated for the left subtree as it would only search for those nodes which have values lesser than the root.

Q. What are the uses of Binary Search Tree?
Ans: Binary search trees can be used to implement sorted stream of data and doubly ended priority queues.


Q. What is the difference between binary search tree and binary tree ?
Ans: A Binary search tree is a tree that follows some order to arrange the elements, whereas the binary tree does not follow any order.

